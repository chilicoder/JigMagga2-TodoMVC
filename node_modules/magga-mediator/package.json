{
  "name": "magga-mediator",
  "description": "The MaggaMediator is the heart of JigMagga. Its job is to provide an communication layer.",
  "version": "0.0.1",
  "main": "src/maggaMediator.js",
  "author": {
    "name": "yd. yourdelivery GmbH",
    "url": "http://www.lieferando.de/"
  },
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "testem",
    "ci": "testem ci"
  },
  "contributors": [
    {
      "name": "Toni Meuschke",
      "email": "meuschke@takeaway.com",
      "url": "https://github.com/meuschke"
    },
    {
      "name": "Jaroslav Popov",
      "email": "jaroslav.popov@takeaway.com",
      "url": "https://github.com/chilicoder"
    },
    {
      "name": "Akrem Abayed",
      "email": "akrem.abayed@takeaway.com"
    }
  ],
  "licenses": [
    {
      "type": "LPGL",
      "url": "http://www.gnu.org/licenses/lgpl.html"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/JigMagga/MaggaMediator"
  },
  "dependencies": {
    "baconjs": "^0.7.58",
    "sockjs": "^0.3.15",
    "sockjs-client": "^1.0.0"
  },
  "devDependencies": {
    "browserify": "^10.1.3",
    "chai": "^2.3.0",
    "eslint": "^0.21.1",
    "express": "^4.12.4",
    "mocha": "^2.2.4",
    "sinon": "^1.14.1",
    "testem": "^0.8.3"
  },
  "readme": "# MaggaMediator [![Build Status](https://travis-ci.org/JigMagga/MaggaMediator.svg?branch=master)](https://travis-ci.org/JigMagga/MaggaMediator)\nThe MaggaMediator is the heart of JigMagga. Its job is to provide an communication layer.\n\n## Usage\n\nInstall module to your project\n```\nnpm install JigMagga/MaggaMediator --save\n```\n\nThen in your code use in like\n\n```\nvar MaggaMediator = require('MaggaMediator');\nmediator = new MaggaMediator();\n```\n\n## Tests\n\nTestem + Mocha + Chai are used for testing. Put your tests in `test/<NAMESPACE>` folder with `*.test.js` extension. To run tests use\n\n```\nnpm test\n```\nBy default tests run in node and chrome.\n\n##Plugins\nWe want to keep the spirit of loosly coupled. We divided Mediator in different parts and implemented its functionality by plugins. \n\n![Scheme is missing][plugins]\n[plugins]: https://github.com/JigMagga/MaggaMediator/blob/master/img/MaggaMediator-plugins.jpg \"Basic scheme of communication in MaggaMediator\"\n\n### Inner Transport plugins\nThese plugins provides storage for callbacks from Jigs  \n* __simple__  Simple object used to store callbacks in key-value style.\n* __baconjs__ For each channel `Bacon.EventStream` would be created. Also, all channels stored as `Bacon.Bus()`\n\n### Outer Transport plugins\nPlugins from this set serve as communication transports between MaggaMediators.\n* __sockjs__ Sock.js used to organize transportation of events to other Mediators.\n\n### Dispatcher plugins\nPlugins that provide additional functionality like permitions or namespaces for events.\n* __dispatcherSimple__ Tiny implementation. Only checks and calls.\n\n### Event naming plugins\nDispatchers uses this plugins to resolve particular names of events from recieved patterns of actions. \n* __eventNamesSimple__ Stores structure in nested object (`{foo:{bar:{bal:{},bot:{}},baz:{}}}`). Provides   \n  `.find()`   method, that returnes all nodes resolved by pattern. `.find('foo.bar')` will return\n  `['foo.bar','foo.bar.bal','foo.bar.bot']`\n\n### ACL plugins\nDispatchers uses this plugins to resolve permitions for particular events. \n* __permissionsSimple__ Stores permissions in as key-values in internal Object.\n\n### Service plugins\n* __monitoring__ Provides debugging tools.\n* __hooks__ frovides EventEmitter methods `.on()` `.once()` `.off()` `.emit()` to the Mediator.\n\n\n##Configuration\n\nMaggaMediators are configuration driving objects. This section explains some points about config conventions. \nWe were inspired by Grunt style of describing it. So, for the configuration you enumerate your plugins with options using \nplugin names as keys. \n\nExample:\n\n```\n      var someSockMediator = new MaggaMediator({\n        plugins: {\n          \"sockjs\":{\n            host: 'localhost',\n            port: 8080,\n            path: '/mediator',\n            permissions:{\n              publish: 'on'\n            }\n          },\n          \"anotherPlugin\":{\n            foo: 'bar',\n            baz: 1\n          }\n        }\n      });\n```\n\nAlternatively, if your plugins doesn't need any options, you can enumerate them in array:\n```\nvar someSockMediator = new MaggaMediator({plugins:['simple','monitoring']});\n```\n##Examples\n###sockjsChat\n__How it works__ \n\nMaggaMediator allows to create chat application in three simple steps:\n\n_Create a mediator_\n```\nvar MaggaMediator = require('maggaMediator.js');\nmediator = new MaggaMediator({\n    plugins: {\n        sockjs: {\n            host: 'localhost',\n            port: 8080,\n            path: '/mediator'\n        }\n    },\n    loadPlugins: ['simple', 'monitoring']\n});\n```\n_Subscribe to channel_\n```\nmediator.subscribe('chatChannel', function(msg){\n    $(\"#chat\").append('<p>' + msg.name + ' wrote: ' + msg.text + '</p>');\n});\n```\n_Instantiate publishing_\n```\n    msg = {\n        name: $(\"#name\").first().val(),\n        text: $(\"#msg\").first().val()\n    };\n    mediator.publish('chatChannel',msg);\n```\nEnjoy your chat:\n\n<img id=\"sockjsChat\" src=\"https://github.com/JigMagga/MaggaMediator/blob/master/img/MaggaMediator-sockjsChat.png\" width=\"500\">\n\n__Setting up__\n\nTo prepare client code for the example go to the folder of the project (e.g `~/repos/MaggaMediator`) and type\n```\nNODE_PATH=./src ./node_modules/.bin/browserify ./examples/sockjsChat/client/client.js -o ./examples/sockjsChat/client/client.browserified.js\n```\nTo start server part type\n```\nnode ./examples/sockjsChat/server/dummySockJsServer.js\n```\nthen open `http://localhost:3000/` in several browsers and type messages\n\n\n\n\n\n \n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/JigMagga/MaggaMediator/issues"
  },
  "homepage": "https://github.com/JigMagga/MaggaMediator",
  "_id": "magga-mediator@0.0.1",
  "_shasum": "8c3eeb8f552f4976a2e18fe602879188e9d71850",
  "_resolved": "git://github.com/JigMagga/MaggaMediator#1e6ca303253fcf47674e4423c1148c82426308f6",
  "_from": "magga-mediator@git://github.com/JigMagga/MaggaMediator"
}
